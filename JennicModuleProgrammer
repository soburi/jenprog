#!/usr/bin/env python3
import os
import imp
import sys
import logging
from argparse import ArgumentParser
import jennic_bootloader

parser = ArgumentParser()
parser.add_argument('-s', '--serial', help='Target serialport', dest='target')
parser.add_argument('-V', '--verbosity', type=int, dest='verbose', metavar='VERBOSE', default=1,
                  help='Verbosity level')
parser.add_argument('-I', '--initialbaud', type=int, help='Initial baudrate', metavar='BAUDRATE',
                  default=38400, dest='initbaud')
parser.add_argument('-P', '--programbaud', type=int, help='Programming baudrate', metavar='BAUDRATE',
                  default=1000000, dest='progbaud')
parser.add_argument('-f', '--firmware', dest='program', metavar='FILE',
                  help='write program to flash memory')
parser.add_argument('-v', '--verify', action='store_true', dest='verify',
                  help='Verify image (not implemented!)')
parser.add_argument('-m', '--mac', dest='mac', metavar='MACADDRESS',
                  help='Reset the mac addr')

trimmed_args = []
for arg in sys.argv:
    if arg.startswith('-') and arg in trimmed_args:
        continue
    else:
        trimmed_args.append(arg)

head, *tail = trimmed_args
opts = parser.parse_args(tail)

class AttrDict(dict):
    def __init__(self, *args, **kwargs):
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self

options = AttrDict(vars(opts))
if sys.platform.startswith('win32'):
    options.conn = 'ftd2xx'
else:
    options.conn = 'ftdi'

options.show = False
options.dump = False
options.erase = False
options.key = False

if not options.target or \
   (not options.program and not options.mac):
    print(( parser.format_help() ))
    exit(0)

if options.verbose == 0:
    loglevel = logging.ERROR
elif options.verbose == 2:
    loglevel = logging.NOTSET
else:
    loglevel = logging.INFO


logging.basicConfig(format='%(message)s', stream=sys.stderr, level=loglevel)

jennic_bootloader.execute(options)
