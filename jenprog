#!/usr/bin/env python3
#
# Copyright (c) 2011
# Telecooperation Office (TecO), Universitaet Karlsruhe (TH), Germany.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
# 3. Neither the name of the Universitaet Karlsruhe (TH) nor the names
#    of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written
#    permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# Author(s): Philipp Scholl <scholl@teco.edu>

from optparse import OptionParser
from sys import stderr, exit
import logging
import jennic_bootloader

conns  = ('serial', 'ipv6', 'ftdi', 'ftd2xx')
parser = OptionParser()
parser.add_option('-a', '--address', dest='addr', type='int',
                  help='start reading at address', metavar='ADDR', default=0x00000000)
parser.add_option('-l', '--len', dest='len', type='int',
                  help='number of bytes to read', metavar='LEN', default=192000)
parser.add_option('-m', '--mac', dest='mac',
                  help='reset the mac addr')
parser.add_option('-k', '--key', dest='key',
                  help='reset the license key')
parser.add_option('--quiet', action='store_const', const=logging.WARNING, dest='loglevel',
                  help='print only accidental messages')
parser.add_option('--verbose', action='store_const', const=logging.DEBUG, dest='loglevel',
                  help='print send and received packets')
parser.add_option('-y', '--verify', action='store_true', dest='verify',
                  help='also verify after writing')
parser.add_option('-s', '--show', dest='show', action='store_true',
                  help='show mac address and license key')
parser.add_option('-d', '--dump', dest='dump', action='store_true',
                  help='dump flash memory to stdout')
parser.add_option('-p', '--program', dest='program', type='string', metavar='FILE',
                  help='write program to flash memory')
parser.add_option('-e', '--erase', dest='erase', action='store_true',
                  help='erasing the flash after reading mac and license key')
parser.add_option('-c', '--connection', type='choice', dest='conn', default='ftdi', choices=conns,
                  help='connection implementation ('+",".join(conns)+') [default: %default]')
parser.add_option('-t', '--target', type='string', help='target for connection', dest='target')
parser.add_option('-B', '--initbaud', type='int', help='UART initialise baudrate (default=38400)',
                  default=38400, dest='initbaud')
parser.add_option('-b', '--baudrate', type='int', help='UART baudrate (default=1000000)',
                  default=1000000, dest='progbaud')

(options, args) = parser.parse_args()

if not options.show and \
   not options.erase and \
   not options.mac and \
   not options.key and \
   not options.dump and \
   not options.program:
    print(( parser.format_help() ))
    exit(0)

if options.loglevel != None:
    loglevel=options.loglevel
else:
    loglevel=logging.INFO

logging.basicConfig(format='%(message)s', stream=stderr, level=loglevel)

jennic_bootloader.execute(options)
